<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[JSSU_Shen]]></title>
  <subtitle><![CDATA[宁静致远]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://jssu.github.io//"/>
  <updated>2015-06-18T01:26:20.000Z</updated>
  <id>http://jssu.github.io//</id>
  
  <author>
    <name><![CDATA[Junsu Shen]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[来FB]]></title>
    <link href="http://jssu.github.io/2015/06/17/a/"/>
    <id>http://jssu.github.io/2015/06/17/a/</id>
    <published>2015-06-18T01:24:02.000Z</published>
    <updated>2015-06-18T01:26:20.000Z</updated>
    <content type="html"><![CDATA[<p>一句话！加油！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一句话！加油！</p>
]]>
    </summary>
    
      <category term="生活" scheme="http://jssu.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tree Connect]]></title>
    <link href="http://jssu.github.io/2015/06/16/Treeconnect/"/>
    <id>http://jssu.github.io/2015/06/16/Treeconnect/</id>
    <published>2015-06-16T23:28:01.000Z</published>
    <updated>2015-06-16T23:39:01.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Given a binary tree<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> TreeLinkNode &#123;</span><br><span class="line">  TreeLinkNode *left;</span><br><span class="line">  TreeLinkNode *right;</span><br><span class="line">  TreeLinkNode *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.</p>
<p>Initially, all next pointers are set to NULL.</p>
</blockquote>
<p>  Definition for binary tree with next pointer.<br>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> TreeLinkNode &#123;</span><br><span class="line"> <span class="keyword">int</span> val;</span><br><span class="line"> TreeLinkNode *left, *right, *next;</span><br><span class="line"> TreeLinkNode(<span class="keyword">int</span> x) : val(x), left(NULL), right(NULL), next(NULL) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>准备：需要一个next level的指针存left</p>
<pre><code><span class="number">1</span>. 一直向左一直到没有左了
<span class="number">2</span>. 判断如果有左，把左边和右边连起来。然后判断
  #如果有<span class="keyword">next</span>，把root右边跟root-&gt;<span class="keyword">next</span>左边连起来。然后把root移到<span class="keyword">next</span>
  #如果没有<span class="keyword">next</span>，nextlevel往左移然后root指向nextlevel（指回来）
</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Solution</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">connect</span><span class="params">( TreeLinkNode * root )</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        TreeLinkNode * nextLevel = root;</span><br><span class="line">        <span class="keyword">if</span>( root )</span><br><span class="line">        &#123;    </span><br><span class="line">            <span class="keyword">while</span>(root-&gt;left)                   </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>( root-&gt;left )</span><br><span class="line">                    root-&gt;left-&gt;next = root-&gt;right;</span><br><span class="line">                <span class="keyword">if</span>( root-&gt;next )</span><br><span class="line">                &#123;</span><br><span class="line">                    root-&gt;right-&gt;next = root-&gt;next-&gt;left;</span><br><span class="line">                    root = root-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    root = nextLevel = nextLevel-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>Given a binary tree<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> TreeLinkNode &#123;</span><br><span class="line">  TreeLinkNode *left;</span><br><span class="line">  TreeLinkNode *right;</span><br><span class="line">  TreeLinkNode *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.</p>
<p>Initially, all next pointers are set to NULL.</p>
</blockquote>
<p>  Definition for binary tree with next pointer.<br>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> TreeLinkNode &#123;</span><br><span class="line"> <span class="keyword">int</span> val;</span><br><span class="line"> TreeLinkNode *left, *right, *next;</span><br><span class="line"> TreeLinkNode(<span class="keyword">int</span> x) : val(x), left(NULL), right(NULL), next(NULL) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="Leetcode" scheme="http://jssu.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vmware Python]]></title>
    <link href="http://jssu.github.io/2015/06/15/vmware/"/>
    <id>http://jssu.github.io/2015/06/15/vmware/</id>
    <published>2015-06-16T00:42:57.000Z</published>
    <updated>2015-06-16T19:47:02.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>// This is the text editor interface.<br>// Anything you type or change here will be seen by the other person in real time.<br>col1:col2:col3:col4<br>col1:col2:foo:col4 \n col1:col2:bar:col4 \n col1:col2:baz:col4<br>col1:col2:foo:col4<br>col1:col2:foo:col4<br>col1:col2:bar:col4</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;unordered_map&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;   <span class="comment">//strtok()</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> findcol&#123;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; <span class="built_in">map</span>;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findcol3</span><span class="params">(<span class="keyword">char</span> * c)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    iostream ip=c;</span><br><span class="line">    <span class="keyword">while</span>(!ip.eof())</span><br><span class="line">    &#123;</span><br><span class="line">     <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">char</span> str[]=ip;</span><br><span class="line">     <span class="keyword">char</span> * pch;</span><br><span class="line">     pch=strtok(str,<span class="string">":"</span>);</span><br><span class="line">     <span class="keyword">while</span>(pch != NULL)  <span class="comment">//repeat 2 times</span></span><br><span class="line">     &#123;                                    <span class="comment">/*col1:col2:foo:col4*/</span></span><br><span class="line">         pch=strtok(NULL, <span class="string">":"</span>);          <span class="comment">/*1 pch= col1, 2 */</span></span><br><span class="line">         count++;</span><br><span class="line">         <span class="keyword">if</span>(count==<span class="number">3</span>)</span><br><span class="line">          <span class="built_in">map</span>[pch]++;</span><br><span class="line">     &#125;   </span><br><span class="line">      count=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x: <span class="built_in">map</span>)</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;x-&gt;first&lt;&lt;<span class="string">" repeat"</span>&lt;&lt;x-&gt;second&lt;&lt;<span class="string">" times"</span>&lt;&lt;endl;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">d = &#123;&#125;</span><br><span class="line">d[<span class="string">'foo'</span>]=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">d.get(<span class="string">'foo'</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">'foo'</span> <span class="keyword">in</span> d then d[<span class="string">'foo'</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">d[<span class="string">'foo'</span>] += <span class="number">1</span></span><br><span class="line">d.update(&#123;<span class="string">'foo'</span>:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line">split</span><br><span class="line">dictionary&lt;string, int&gt;</span><br><span class="line"></span><br><span class="line">s= <span class="string">'col1:col2:foo:col4'</span></span><br><span class="line">l=s.split(<span class="string">':'</span>)[<span class="number">2</span>]</span><br><span class="line">//-- <span class="keyword">if</span> diction.get(l[i])==<span class="keyword">None</span></span><br><span class="line">//   dictionl[i]=<span class="number">0</span></span><br><span class="line">// <span class="keyword">else</span></span><br><span class="line">//   diction[l[i]]+=<span class="number">1</span></span><br><span class="line">//llen=l.size()</span><br><span class="line">//<span class="keyword">for</span>(int i=<span class="number">0</span>; i&lt;llen; i++)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(l)):</span><br><span class="line">  temp=diction.get(l[i],<span class="number">0</span>)+=<span class="number">1</span></span><br><span class="line">  diction[l[i]=temp</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(diction)):</span><br><span class="line">    print(diction)</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>// This is the text editor interface.<br>// Anything you type or change here will be seen by the other person in real time.<br>col1:col2:col3:col4<br>col1:col2:foo:col4 \n col1:col2:bar:col4 \n col1:col2:baz:col4<br>col1:col2:foo:col4<br>col1:col2:foo:col4<br>col1:col2:bar:col4</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;unordered_map&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;   <span class="comment">//strtok()</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> findcol&#123;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; <span class="built_in">map</span>;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="学习" scheme="http://jssu.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[System Design]]></title>
    <link href="http://jssu.github.io/2015/06/12/FB%E8%AE%BE%E8%AE%A12/"/>
    <id>http://jssu.github.io/2015/06/12/FB设计2/</id>
    <published>2015-06-13T03:44:32.000Z</published>
    <updated>2015-06-16T00:45:18.000Z</updated>
    <content type="html"><![CDATA[<p>转自 mitbbs：<a href="http://www.mitbbs.com/article_t1/JobHunting/32777529_0_6.html" target="_blank" rel="external">http://www.mitbbs.com/article_t1/JobHunting/32777529_0_6.html</a><br>我的面试也结束了 因为知道FLAG这类公司都会问到System Design的问题 所以这次面<br>试着重准备了一下 在这里分享给大家 如果有不对或者需要补充的地方 大家可以留言</p>
<p>这里说的System Design和OO Design不同 System Design在FLAG以及很多大公司中主要<br>是design scalable distributed systems 这里只讨论如何准备这种题目<br><a id="more"></a></p>
<p>== 入门 ==<br>对于0基础的同学们 下面的资料可以按顺序开始看</p>
<ol>
<li><a href="http://www.hiredintech.com/app#system-design" target="_blank" rel="external">http://www.hiredintech.com/app#system-design</a><br>这是一个专门准备面试的网站 你只用关心system design部分 有很多的link后面会重<br>复提到 建议看完至少一遍</li>
</ol>
<ol>
<li><p><a href="https://www.youtube.com/watch?v=-W9F__D3oY4" target="_blank" rel="external">https://www.youtube.com/watch?v=-W9F__D3oY4</a><br>非常非常好的入门资料 建议看3遍以上！<br>这是1里面提到的资料 是Harvard web app课的最后一节 讲scalability 里面会讲到很<br>多基础概念比如Vertical scaling, Horizontal scaling, Caching, Load balancing,<br>Database replication, Database partitioning 还会提到很多基本思想比如avoid<br>single point of failure<br>再强调一遍 非常好的资料！<br>入门的第二个视频<br>这里有完整的版本<br><a href="http://v.163.com/special/opencourse/buildingdynamicwebsites.htm" target="_blank" rel="external">http://v.163.com/special/opencourse/buildingdynamicwebsites.htm</a></p>
</li>
<li><p><a href="http://www.lecloud.net/post/7295452622/scalability-for-dummies-part-1-clones" target="_blank" rel="external">http://www.lecloud.net/post/7295452622/scalability-for-dummies-part-1-clones</a><br>1里面提到的 Scalability for Dummies 还算不错 可以看一遍 知道基本思想</p>
</li>
</ol>
<p>结束语：当你结束这一部分的学习的时候 你已经比50%的candidate知道的多了(因为很<br>多人都不准备 或者不知道怎么准备system design) 恭喜:)</p>
<p>== 进阶 ==<br>这一部分的资料更加零散 每个看的可能不一样 但是你每多看一篇文章或者一个视频<br>你就比别人强一点<br>这部分你会遇到很多新名词 我的建议是每当你遇到一个不懂的概念时 多google一下<br>看看这个概念或者技术是什么意思 优点和缺点各是什么 什么时候用 这些你都知道以<br>后 你就可以把他运用到面试中 让面试官刮目相看了</p>
<ol>
<li><a href="http://highscalability.com/blog/2009/8/6/an-unorthodox-approach-to-database-design-the-coming-of-the.html" target="_blank" rel="external">http://highscalability.com/blog/2009/8/6/an-unorthodox-approach-to-database-design-the-coming-of-the.html</a><br>Database Sharding是一个很重要的概念 建议看一看</li>
</ol>
<ol>
<li><a href="http://highscalability.com/all-time-favorites/" target="_blank" rel="external">http://highscalability.com/all-time-favorites/</a><br>这个里面会讲到很多非常流行的网站架构是如何实现的 比如Twitter, Youtube,<br>Pinterest, Google等等 我的建议是看5-6个 然后你应该已经建立起了一些基本的意识<br>还有知道了某些技术和产品的作用和mapping 比如说到cache你会想到memcached和<br>Redis 说到<br>load balancer你会想到 Amazon ELB, F5一类的</li>
</ol>
<ol>
<li><a href="http://www.infoq.com/" target="_blank" rel="external">http://www.infoq.com/</a><br>5里面很多的文章都会有链接 其中有很多会指向这个网站 这里面有很多的tech talk<br>很不错 可以看看</li>
</ol>
<ol>
<li><a href="https://www.facebook.com/Engineering/notes" target="_blank" rel="external">https://www.facebook.com/Engineering/notes</a><br>Facebook非常好的技术日志 会讲很多facebook的feature怎么实现的 比如facebook<br>message:<a href="https://www.facebook.com/notes/facebook-engineering/the-underlying-" target="_blank" rel="external">https://www.facebook.com/notes/facebook-engineering/the-underlying-</a><br>technology-of-messages/454991608919 建议看看 尤其是准备面facebook的同学<br>这有一个facebook talk讲storage的<a href="https://www.youtube.com/watch?v=5RfFhMwRAic" target="_blank" rel="external">https://www.youtube.com/watch?v=5RfFhMwRAic</a></li>
</ol>
<ol>
<li>一些国内网站上的资料<br><a href="http://blog.csdn.net/sigh1988/article/details/9790337" target="_blank" rel="external">http://blog.csdn.net/sigh1988/article/details/9790337</a><br><a href="http://blog.csdn.net/v_july_v/article/details/6279498" target="_blank" rel="external">http://blog.csdn.net/v_july_v/article/details/6279498</a></li>
</ol>
<ol>
<li>最后一些概念很有用 都是我再看这些资料的时候发现的 如果你没有遇到或者查过<br>建议查查<br>Distributed Hash Table<br>Eventual Consistency vs Strong Consistency<br>Read Heavy vs Write Heavy<br>Consistent Hashing<br>Sticky Sessions<br>Structured Data(uses DynamoDB) vs Unstructured Data(uses S3)<a href="http://smartdatacollective.com/michelenemschoff/206391/quick-guide-structured-and-unstructured-data" target="_blank" rel="external">http://smartdatacollective.com/michelenemschoff/206391/quick-guide-structured-and-unstructured-data</a> <a href="http://stackoverflow.com/questions/18678315/amazon-s3-or-dynamodb" target="_blank" rel="external">http://stackoverflow.com/questions/18678315/amazon-s3-or-dynamodb</a></li>
</ol>
<p>10 给有兴趣深入研究的人看的<br>Mining Massive Datasets —讲很多big data和data mining的东西<br>Big Data: Principles and best practices of scalable realtime data systems —<br>twitter的前员工讲述如何处理实时数据</p>
<p>10 凌乱的资料 随便看看吧<br><a href="http://highscalability.com/blog/2013/10/28/design-decisions-for" target="_blank" rel="external">http://highscalability.com/blog/2013/10/28/design-decisions-for</a><br>== 小结＝＝<br>看多了以后 你的最终目标应该是心里有了一个大框架 一个基本的distributed system<br>是怎么搭起来的 然后心里有很多if condition 如果要是满足这个条件 我应该用什么<br>技术 比如如果read heavy那么用cache会提升performance之类的 同时知道应该避免什<br>么东西 比如避免single point of failure 再比如时间和空间的tradeoff在read<br>heavy的时候应该倾向于时间 Write heavy的时候倾向于空间等等</p>
<p>你总结出来的和我总结出来的大框架和if conditions肯定不完全一样 但因为system<br>design本来就是一个open ended question 所以不用害怕 能够自圆其说 就不会有问题</p>
<p>最后 本文纯属抛砖引玉 如果有大牛发现有错误或者有补充 欢迎留言 大家一起讨论</p>
<p>== FAQ ==</p>
<ol>
<li>New Grad需要看System Design么?</li>
</ol>
<p>答案是it depends. 有的公司会考system design 有的公司只考到OO design 有的公司<br>压根不考 当然 考到的公司对new grad的期望值会稍微低一点 但是 你有这么一个机会<br>能让你gain leverage over other candidates why not? 为什么要让自己在面试前害怕<br>面试官出system design的题目呢?</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>转自 mitbbs：<a href="http://www.mitbbs.com/article_t1/JobHunting/32777529_0_6.html">http://www.mitbbs.com/article_t1/JobHunting/32777529_0_6.html</a><br>我的面试也结束了 因为知道FLAG这类公司都会问到System Design的问题 所以这次面<br>试着重准备了一下 在这里分享给大家 如果有不对或者需要补充的地方 大家可以留言</p>
<p>这里说的System Design和OO Design不同 System Design在FLAG以及很多大公司中主要<br>是design scalable distributed systems 这里只讨论如何准备这种题目<br>]]>
    
    </summary>
    
      <category term="Design" scheme="http://jssu.github.io/tags/Design/"/>
    
      <category term="FB" scheme="http://jssu.github.io/tags/FB/"/>
    
      <category term="学习" scheme="http://jssu.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[张翠山 殷素素 偷来的那十年]]></title>
    <link href="http://jssu.github.io/2015/06/11/%E5%81%B7%E6%9D%A5%E7%9A%84%E9%82%A3%E5%8D%81%E5%B9%B4/"/>
    <id>http://jssu.github.io/2015/06/11/偷来的那十年/</id>
    <published>2015-06-12T03:20:06.000Z</published>
    <updated>2015-06-12T03:58:30.000Z</updated>
    <content type="html"><![CDATA[<p>转载-from 简书，作者 西湘 <a href="http://www.jianshu.com/p/9ec421d5c7b8" target="_blank" rel="external">http://www.jianshu.com/p/9ec421d5c7b8</a></p>
<p>&lt;倚天屠龙记&gt;是我看的第一部金庸小说，那时大概才十来岁，很多情节都看不太懂，而且胆子还巨小，看到龙门镖局满庭死尸时一颗小心脏几乎就要破胸而出。而紧接着画风一转，月光下，一个身穿淡绿衫子的少女抱膝独坐船头，望着天边初升的眉月，本来急于追凶的张五侠却突然放下大事，跟这个姑娘开始谈起情说起爱来。那时候不知情为何物，只觉得很是奇怪，这个姑娘为什么要假冒张翠山杀人全家，张翠山知道是她冒名所杀以后为什么又不予追究，很多年以后我才知道，这个叫作“爱情”东西就是这样，你并不知道它是什么时候萌发的，等到你发现的时候已经情根深重无法自拔了。<br><a id="more"></a><br>殷素素的出场跟黄蓉首次女装出场有一点像，她们倾心的都是敦厚君子，两个少女都一般的冰雪聪明容光逼人，如凌波仙子般驾着一叶扁舟与男主角相见。不同的是黄蓉的出场是让人眼前一亮、心头一热，而殷素素的出场是让人眼前一亮、心头一惊。黄蓉换女装约见郭靖前干了一件小“坏”事，把黄河四鬼吊在林子里逗郭靖开心，而殷姑娘出场前也干了一件坏事，不过是大坏事，杀了龙门镖局七十二口，两下一对比便能遥观两对恋人此后的结局了。</p>
<p>说来也奇怪，金庸书里的男女主角初见似乎有这么一个套路：女生一定要在容貌装扮上弄些玄虚，要么是女扮男装（殷素素、温青青等），要么是蒙面（任盈盈、木婉清等），女主角一定要狂炫酷霸拽，杀人不眨眼，各种任性胡闹死作，动不动就对男主角大耳刮子招呼，宅心仁厚的男主角都不会跟她们计较，只会苦口婆心讲道理“女孩子家家行动就打打杀杀，别说是伤了人，伤了花花草草也不对的呀……”令狐冲对任盈盈是这么干的，袁承志对温青青也是如此，段誉对木婉清也是如此，当然了，张翠山对殷素素也是如此。</p>
<p>要感化、改变一个人不是那么简单的事情，殷素素对于张五侠的劝诫十分不以为然“你要教训我么？我活了一十九岁，倒从来没听人教训过呢。”面对霸道强势的殷小姐，张五侠只好表示“倘若你没好下场，我也跟你一起没好下场。”没想到一语成谶。</p>
<p>广东人形容姻缘牢固时爱说“台风都打不散”，这两个人的姻缘算是一场大风成就的，《倾城之恋》里香港的沦陷成就了白流苏和范柳原，老天爷为了成全张翠山与殷素素这一对，阵仗也不小，海底地震引发海啸，还惹起了一场惊天大风暴，天崩地裂狂涛巨浪之中，两个人突然觉得再也没有了什么正邪之分、男女之防，只想死在一起就好。天公作美，两人竟然没有死，那么就“活在一起”吧。</p>
<p>如果没有那场突如奇来的海上风暴，一切会怎样呢？张翠山本为追查俞岱岩受伤一事而下的江南，到了临安案子没查清楚又无端被栽赃一身血债，好不容易在殷素素这儿找到线索，自然要追查下去，迟早会水落石出。二人虽然年轻，一个是响当当的武当五侠，一个是魔教教主的爱女，都算是有点身份的人，一言一行无不牵涉门弟荣辱，这段恋情只怕等不到告白就要告吹了。</p>
<p>经历九死一生颠沛离奇的海上漂流之后，嫌疑人虽在眼前，一切的谜团都没有解开，但张翠山选择了掩耳盗铃。二人在冰火岛上结成夫妻，但是他们大概内心里也知道，他们只能在冰火岛上做夫妻。</p>
<p>夫妻之道在于同心同德心心相印，夫妻一体方能其利断金，夫妻之间如果存在秘密，不管埋藏得多么深厚，像那十七层棉褥下的一颗黄豆，终将令人无法安枕。二人在冰火岛一住十年，殷素素满腔的秘密，但是他既不想听，她也就不提。最初是以为去国太远，归乡无望，旧事说来并无益处。而后来决定回国以后，依旧不提不想不作打算，那便是张翠山的懦弱，因为他不知道怎样去面对。</p>
<p>冰火岛上的十年充满了一种不真实感，他们抛开了旧日荣光，在岛上烧陶作碗，堆土为灶，打猜捕鱼，弄儿为乐。金庸书里隐居的侠客实在不少，可是每个人在退隐之前都已把该报的仇、该还的情、该杀的人都解决掉以后方才离开，并且离开了就不再回头。而这对夫妻是阴差阳错被一阵风暴强行送到这海外荒岛来隐居，他们的江湖路像是被按下了“暂停键”，于不可能之中偷来这十年美好光阴，末了仍要回到江湖中去。</p>
<p>古代这个落后的避孕术真是把双刃剑，既害惨了段正淳的情人们，又造福了穆念慈、韦春花们使她们得了个好儿子。张翠山夫妇有了孩子这个事情既喜人又愁人，孩子不能一辈子留在这海上孤岛，他必须得回归社会。于是，他们只好硬着头皮回到中原故土。</p>
<p>关于回去后的情形，我想殷素素大概早就想清楚了，出来混，迟早是要还的。她已经是一个母亲，为了儿子即使牺牲性命也在所不惜。而张翠山呢倒是心无挂碍的样子，看到有船以后第一反应竟然是“纵起身来，翻了个筋斗”，他早已将“暂停键”以前的事情忘到九宵云外去了，既是惆怅又是兴奋，满心里想着这十年来师兄弟们个个进步，只有他要落后了，也许他还准备着重出江湖，再为武当干下一番事业。但是，中原武林这十年来可没有“暂停”，当年的纷争纵然并未平息，各门派间因为这两口子与谢逊的失踪又平添了许多仇怨，他们这一回归算是撞枪口上了。</p>
<p>张五侠身为赫赫有名的武当名门弟子，却与魔教教主的女儿结为伉俪，况且这个妻子还害得师兄终身残疾，简直贻笑江湖。张三丰虽然号称不拘泥于正邪之分，并表示想跟殷素素她爹交个朋友，可是老道圆滑不可信也，武当虽然木秀于林，但是也不能特立独行，若干年后围攻光明顶的时候武当二代弟子除了俞岱岩外倾巢出动，显然是卖力得紧。张、殷二人生米已煮成熟饭，张三丰虽然有意庇护，但是其它江湖门派咬定青山不放松，武当派也是独木难支。</p>
<p>从冰火岛回到武当山，爱情失去了障眼法。殷素素在俞岱岩床前坦白过往的时候，张翠山的反应是大吃一惊，仿佛从来未曾预料到，指着爱妻道：“你……你骗得我好苦。”殷素素则把剑递给他，道：“五哥，你我十年夫妻，蒙你怜爱，情深义重，我今日死而无怨，盼你一剑将我杀了，全你武当七侠之义。”比起张翠山的震惊愤怒，她说这番求死之言反倒显得平静深远，也许这样的情形，在回国的筏子上她早已经试演过千万遍了。她这一番话把什么都交待得清清楚楚：十年夫妻已经足够，你张五侠没有对不起我，我自作自受死而无怨，但是我也深深地明白，此时对于你来说最重要的是全武当七侠之义，兄弟如手足，女人如衣服，我有错在先，你不必犹豫。她说得很对，张翠山确实是要全武当七侠之义，可是夫妻之情也不能一剑抹煞，过往之事他无力回天，眼前尴尬他没法化解，将来种种更是不敢设想。他没脸面对同门，也不能偏袒妻子，更不能让师尊和各位师兄弟因为他而与整个武林正道为敌。上天无路入地无门，只好一死了之。</p>
<p>他这一死，可以理解为妻还债，也可以理解为向师门表忠心，总之，死者为大。张翠山是个好男儿、好丈夫、好兄弟，但是缺点也很明显，说到底还是脸皮太薄太脆，太要面子。他甚至都没有想过，他死以后殷素素如何立足，先是害得俞三侠手足残废，继又害得张五侠伤心殒命，红颜祸水，罪加一等。武当自然无她立足之地，江湖上追寻谢逊和屠龙刀下落的人们更是不会放过她，她也唯有一死而已。</p>
<p>公平地说，俞岱岩的悲剧虽因殷素素而起，但并非她一手造成，她尽力挽救了，只可惜误中奸人诡计。殷素素罪不至死，更不至于夫妻二人一道自杀谢罪。这夫妇二人一死，不过是徒惹亲者痛、仇者快而已，于俞岱岩也无任何好处，反而加重他的心理负担。</p>
<p>若干年后他们的儿子张无忌被四位师叔伯冤枉为杀害莫七侠的杀手，张无忌身负诸般嫌疑百口难辩，这个没用的家伙也跟他那一根筋的爹地一样，唯一能想到的念头就是自杀。得亏赵敏在旁一声断喝：“张无忌，大丈夫忍得一时冤屈，打甚么紧，天下没有不能水落石出之事。你务须找到杀害莫七侠的真凶，为他报仇，才不枉了武当诸侠疼爱你一场。”假如当初殷素素也能像她的未来儿媳妇那样来声河东狮吼：“张翠山，错已铸成死有何用？上有白发恩师下有垂髫幼儿，眼下大敌当前，不如留待这有用之身找出当年毒害三伯的元凶，应付这满堂不善之客，方能不负你师傅、师兄弟们的恩义！”可惜她没有，因为赵敏当时置身事外，自然可以放胆豪言，而她是确确实实有负于人。</p>
<p>江湖弟子向来只有眼前路，没有身后身，当年钱塘江上谋夺屠龙刀时她又哪里能想到，这会在她将来的人生路上留下致命祸患，当年她一时贪玩买了跟他一模一样衣衫头巾，又哪里会想到能够与伊人终成眷属。如果没有那阵风暴，他也许还好好地做着声震天下的武当五侠，她还在江湖上四处杀虐快意恩仇，可是如果没有那阵风暴，也就没有海外十年的美好光景，也不会有无忌那么可爱的爱情结晶。</p>
<p>金庸笔下的女子在感情事上总是比男子要勇敢，男人们面对感情的时候总是被动且无用，而姑娘们大多刀山火海一往无前，事了一句“不悔”便是交待。情不知所起，她爱上了他，与他到过天之涯海之角，最后与他同赴黄泉，也许她是无悔的吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>转载-from 简书，作者 西湘 <a href="http://www.jianshu.com/p/9ec421d5c7b8">http://www.jianshu.com/p/9ec421d5c7b8</a></p>
<p>&lt;倚天屠龙记&gt;是我看的第一部金庸小说，那时大概才十来岁，很多情节都看不太懂，而且胆子还巨小，看到龙门镖局满庭死尸时一颗小心脏几乎就要破胸而出。而紧接着画风一转，月光下，一个身穿淡绿衫子的少女抱膝独坐船头，望着天边初升的眉月，本来急于追凶的张五侠却突然放下大事，跟这个姑娘开始谈起情说起爱来。那时候不知情为何物，只觉得很是奇怪，这个姑娘为什么要假冒张翠山杀人全家，张翠山知道是她冒名所杀以后为什么又不予追究，很多年以后我才知道，这个叫作“爱情”东西就是这样，你并不知道它是什么时候萌发的，等到你发现的时候已经情根深重无法自拔了。<br>]]>
    
    </summary>
    
      <category term="文章" scheme="http://jssu.github.io/tags/%E6%96%87%E7%AB%A0/"/>
    
      <category term="生活" scheme="http://jssu.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hashtable]]></title>
    <link href="http://jssu.github.io/2015/06/08/hashtable/"/>
    <id>http://jssu.github.io/2015/06/08/hashtable/</id>
    <published>2015-06-08T22:16:11.000Z</published>
    <updated>2015-06-08T22:48:09.000Z</updated>
    <content type="html"><![CDATA[<p>一个字，累，写了1个小时的code</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This is the text editor interface. </span></span><br><span class="line"><span class="comment">// Anything you type or change here will be seen by the other person in real time.</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ispalindrome</span><span class="params">(<span class="built_in">string</span> s)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lens=s.size();</span><br><span class="line">    <span class="keyword">if</span>(lens==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;lens/<span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]!=s[lens-<span class="number">1</span>-i])</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Write a piece of code to check <span class="keyword">if</span> a given <span class="built_in">string</span> is a palindrome</span><br><span class="line">without reversing the <span class="built_in">string</span>.</span><br><span class="line"></span><br><span class="line">Implement a hashtable.</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> HashNode</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>: </span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    HashNode * next;</span><br><span class="line">    HashNode(<span class="keyword">int</span> k, <span class="keyword">int</span> v)</span><br><span class="line">    &#123;</span><br><span class="line">        key=k;</span><br><span class="line">        value=v;</span><br><span class="line">        next=NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> TABLE_SIZE = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> HashMap&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    HashNode **  htable;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    HashMap()</span><br><span class="line">    &#123;</span><br><span class="line">        htable = <span class="keyword">new</span> HashNode*[TABLE_SIZE];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; TABLE_SIZE; i++)</span><br><span class="line">        &#123;</span><br><span class="line">             htable[i]=NULL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">HashFunc</span><span class="params">(<span class="keyword">int</span> key)</span>   </span><br><span class="line"> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> key % TABLE_SIZE;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span></span><br><span class="line"> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> hash_val = HashFunc(key);</span><br><span class="line">     HashNode * prev =NULL;</span><br><span class="line">     HashNode * entry =htable[hash_val];</span><br><span class="line">     <span class="keyword">while</span>(entry != NULL)</span><br><span class="line">     &#123;</span><br><span class="line">       prev = entry;</span><br><span class="line">       entry= entry -&gt;next;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(entry == NULL)</span><br><span class="line">     &#123;</span><br><span class="line">         entry = <span class="keyword">new</span> HashNode(key, value);</span><br><span class="line">         <span class="keyword">if</span>(prev==NULL)</span><br><span class="line">           htable[hash_val] = entry;</span><br><span class="line">         <span class="keyword">else</span> </span><br><span class="line">           prev-&gt;next=entry;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">         entry-&gt;value=value;</span><br><span class="line">     </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">Remove</span><span class="params">(<span class="keyword">int</span> key)</span></span><br><span class="line"> </span>&#123;  <span class="keyword">int</span> hash_val= HashFunc(key);</span><br><span class="line">    HashNode * entry = htable[hash_val];</span><br><span class="line">    HashNode * prev = NULL;</span><br><span class="line">    <span class="keyword">if</span>(entry == NULL || entry-&gt;key != key)</span><br><span class="line">        &#123;<span class="built_in">cout</span>&lt;&lt; <span class="string">"nothing find for key"</span>&lt;&lt;key&lt;&lt;<span class="string">", or something wrong with the HTB"</span>&lt;&lt;endl;</span><br><span class="line">          <span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">while</span>(entry-&gt;next != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        prev=entry;</span><br><span class="line">        entry = entry -&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(prev != NULL) </span><br><span class="line">      prev-&gt;next = entry-&gt; next;</span><br><span class="line">    <span class="keyword">delete</span>  entry;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">bool</span> <span class="title">Search</span><span class="params">(<span class="keyword">int</span> key)</span>       <span class="comment">// true 1, false 0;</span></span><br><span class="line"> </span>&#123;</span><br><span class="line">     <span class="keyword">bool</span> flag = <span class="keyword">false</span>; </span><br><span class="line">     <span class="keyword">int</span> hash_val= HashFunc(key);</span><br><span class="line">     HashNode * entry= htable[hash_val];</span><br><span class="line">     <span class="keyword">while</span>(entry != NULL)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">if</span>(entry-&gt;key==key)</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">         entry = entry-&gt;next;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> flag;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>一个字，累，写了1个小时的code</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This is the text editor interface. </span></span><br><span class="line"><span class="comment">// Anything you type or change here will be seen by the other person in real time.</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ispalindrome</span><span class="params">(<span class="built_in">string</span> s)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lens=s.size();</span><br><span class="line">    <span class="keyword">if</span>(lens==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;lens/<span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]!=s[lens-<span class="number">1</span>-i])</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Write a piece of code to check <span class="keyword">if</span> a given <span class="built_in">string</span> is a palindrome</span><br><span class="line">without reversing the <span class="built_in">string</span>.</span><br><span class="line"></span><br><span class="line">Implement a hashtable.</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="VMWare" scheme="http://jssu.github.io/tags/VMWare/"/>
    
      <category term="学习" scheme="http://jssu.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GF]]></title>
    <link href="http://jssu.github.io/2015/06/07/gf/"/>
    <id>http://jssu.github.io/2015/06/07/gf/</id>
    <published>2015-06-08T03:48:29.000Z</published>
    <updated>2015-06-08T03:54:37.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://scontent-iad3-1.xx.fbcdn.net/hphotos-xtp1/v/t1.0-9/10258515_1492803327606377_4726714035170089888_n.jpg?oh=d7416c39d1d1a7c57f953b42244b52fc&amp;oe=5631187C" alt="百媚生"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://scontent-iad3-1.xx.fbcdn.net/hphotos-xtp1/v/t1.0-9/10258515_1492803327606377_4726714035170089888_n.jpg?oh=d7416c39d1d1a]]>
    </summary>
    
      <category term="照片" scheme="http://jssu.github.io/tags/%E7%85%A7%E7%89%87/"/>
    
      <category term="生活" scheme="http://jssu.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Terminal]]></title>
    <link href="http://jssu.github.io/2015/06/07/Terminal/"/>
    <id>http://jssu.github.io/2015/06/07/Terminal/</id>
    <published>2015-06-07T23:12:01.000Z</published>
    <updated>2015-06-07T23:13:38.000Z</updated>
    <content type="html"><![CDATA[<p>在bin中创建sublime：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s <span class="regexp">/Applications/</span>Sublime\ Text.app<span class="regexp">/Contents/</span>SharedSupport<span class="regexp">/bin/</span>subl <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>sublime</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在bin中创建sublime：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td clas]]>
    </summary>
    
      <category term="Mac" scheme="http://jssu.github.io/tags/Mac/"/>
    
      <category term="学习" scheme="http://jssu.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[FB Newsfeed]]></title>
    <link href="http://jssu.github.io/2015/06/07/newsfeed/"/>
    <id>http://jssu.github.io/2015/06/07/newsfeed/</id>
    <published>2015-06-07T19:31:23.000Z</published>
    <updated>2015-06-07T21:25:20.000Z</updated>
    <content type="html"><![CDATA[<blockquote><p>Facebook 每天有5亿活跃用户。每个用户可以更新自己的状态消息。当用户登录Facebook时，”新鲜事“会显示用户好友们最近两周内的状态消息。消息为纯文本顺序主要由时间决定，但是也受到好友关系，消息重要性，好友当前消息和上一条消息的间隔，等等的因素影响。试设计”新鲜事“功能的系统架构。假设每台服务器有64GB内存，2TB硬盘，试估算该系统总共需要多少服务器.(这仍然是一个开放性的问题,会根据你的设计而提出后续问题.）</p>
</blockquote>
<p><img src="https://scontent-iad3-1.xx.fbcdn.net/hphotos-xaf1/v/t1.0-9/10346613_10204510158449550_4442268752029060499_n.jpg?oh=caf5bb9adbceb4dc39575e332da78719&amp;oe=55FFA1C6" alt="FB链接截图Architectur"><br><a id="more"></a><br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://www.aosabook.org/en/distsys.html</span></span><br></pre></td></tr></table></figure></p>
<blockquote><p>随便抛块砖。<br>如你所说，没有标准答案，不同面试官心里可能装着不同的答案，你要尽可能顺着对方思路走。多问问题澄清假设，给出多种选择让对方决定详细说哪一个。其实因为用户的状态更新一旦提交，在整个生命周期就是只读状态，（如果允许删除状态更新的话会增加复杂性，这里暂不考虑）所以处理起来相对复杂性并不高。我觉得需要考虑的有以下几点：<br>1）确定需要处理的数据规模。假定FB有10亿用户，里面有1亿每天登陆的活跃用户需要看到update，平均每个人每天看到50条更新。10亿用户中平均每两周有5000万会发布状态更新，平均每人每周10次，每条更新需要50个字节的存储和传送（内容＋timestamp+uid+updateId)。这些都是我的假设，需要对方confirm.如果对方认可，那每天需要传送到活跃用户wall上的数据是50Byte <em> 100M </em> 50 =250G bytes ， 约为 3MB/second。考虑到要能处理spike，可以设计传输的capacity为10MB/second.存储系统只需存储过去两周的数据，50M <em> 10 </em> 50byte = 25GB，考虑p</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote><p>Facebook 每天有5亿活跃用户。每个用户可以更新自己的状态消息。当用户登录Facebook时，”新鲜事“会显示用户好友们最近两周内的状态消息。消息为纯文本顺序主要由时间决定，但是也受到好友关系，消息重要性，好友当前消息和上一条消息的间隔，等等的因素影响。试设计”新鲜事“功能的系统架构。假设每台服务器有64GB内存，2TB硬盘，试估算该系统总共需要多少服务器.(这仍然是一个开放性的问题,会根据你的设计而提出后续问题.）</p>
</blockquote>
<p><img src="https://scontent-iad3-1.xx.fbcdn.net/hphotos-xaf1/v/t1.0-9/10346613_10204510158449550_4442268752029060499_n.jpg?oh=caf5bb9adbceb4dc39575e332da78719&amp;oe=55FFA1C6" alt="FB链接截图Architectur"><br>]]>
    
    </summary>
    
      <category term="Design" scheme="http://jssu.github.io/tags/Design/"/>
    
      <category term="FB" scheme="http://jssu.github.io/tags/FB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[FB Design Preparation]]></title>
    <link href="http://jssu.github.io/2015/06/07/Design/"/>
    <id>http://jssu.github.io/2015/06/07/Design/</id>
    <published>2015-06-07T17:58:50.000Z</published>
    <updated>2015-06-07T20:52:59.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>入门级的news feed</li>
</ol>
<p><a href="http://www.infoq.com/presentations/Scale-at-Facebook" target="_blank" rel="external">http://www.infoq.com/presentations/Scale-at-Facebook</a>  （check）<br><a href="http://www.infoq.com/presentations/Facebook-Software-Stack" target="_blank" rel="external">http://www.infoq.com/presentations/Facebook-Software-Stack</a><br>一般的followup question是估算需要多少server<br>另外这个帖子有讨论<br><a href="http://www.mitbbs.ca/article_t/JobHunting/32463885.html" target="_blank" rel="external">http://www.mitbbs.ca/article_t/JobHunting/32463885.html</a><br>这篇文章稍微提到要怎么approach这种题，可以稍微看看<br><a href="http://book.douban.com/reading/23757677/" target="_blank" rel="external">http://book.douban.com/reading/23757677/</a></p>
<a id="more"></a>
<ol>
<li>facebook chat,这个也算是挺常问的<br><a href="http://www.erlang-factory.com/upload/presentations/31/EugeneLet" target="_blank" rel="external">http://www.erlang-factory.com/upload/presentations/31/EugeneLet</a></li>
</ol>
<p><a href="https://www.facebook.com/note.php?note_id=14218138919" target="_blank" rel="external">https://www.facebook.com/note.php?note_id=14218138919</a></p>
<p><a href="http://www.cnblogs.com/piaoger/archive/2012/08/19/2646530.html" target="_blank" rel="external">http://www.cnblogs.com/piaoger/archive/2012/08/19/2646530.html</a><br><a href="http://essay.utwente.nl/59204/1/scriptie_J_Schipers.pdf" target="_blank" rel="external">http://essay.utwente.nl/59204/1/scriptie_J_Schipers.pdf</a></p>
<ol>
<li>typeahead search/search suggestion，这个也常见</li>
</ol>
<p><a href="https://www.facebook.com/video/video.php?v=432864835468" target="_blank" rel="external">https://www.facebook.com/video/video.php?v=432864835468</a></p>
<p>问题在这个帖子里被讨论到，基本上每个问题，在视频里都有回答<br><a href="http://www.mitbbs.com/article_t/JobHunting/32438927.html" target="_blank" rel="external">http://www.mitbbs.com/article_t/JobHunting/32438927.html</a></p>
<ol>
<li>任给一个手机的位置信号(经纬度)，需要返回附近5mile 的POI<br>这个这里有讨论，这题貌似nyc很爱考…<br><a href="http://www.mitbbs.ca/article0/JobHunting/32476139_0.html" target="_blank" rel="external">http://www.mitbbs.ca/article0/JobHunting/32476139_0.html</a></li>
</ol>
<ol>
<li>Implement second/minute/hour/day counters<br>这题真不觉得是system design，但万一问道，还是要有准备，貌似在总部面试会被问<br>道….<br>这个帖子有讨论<br><a href="http://www.mitbbs.com/article_t/JobHunting/32458451.html" target="_blank" rel="external">http://www.mitbbs.com/article_t/JobHunting/32458451.html</a></li>
</ol>
<ol>
<li>facebook photo storage，这个不太会被问起，但是知道也不错</li>
</ol>
<p><a href="https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Beaver.pdf" target="_blank" rel="external">https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Beaver.pdf</a></p>
<p><a href="https://www.facebook.com/note.php?note_id=76191543919" target="_blank" rel="external">https://www.facebook.com/note.php?note_id=76191543919</a></p>
<ol>
<li>facebook timeline,这个也不太是个考题，看看就行了</li>
</ol>
<p><a href="https://www.facebook.com/note.php?note_id=10150468255628920" target="_blank" rel="external">https://www.facebook.com/note.php?note_id=10150468255628920</a></p>
<p><a href="http://highscalability.com/blog/2012/1/23/facebook-timeline-bro" target="_blank" rel="external">http://highscalability.com/blog/2012/1/23/facebook-timeline-bro</a></p>
<p>除了这些，准备一下这些题目<br>implement memcache<br><a href="http://www.adayinthelifeof.nl/2011/02/06/memcache-internals/" target="_blank" rel="external">http://www.adayinthelifeof.nl/2011/02/06/memcache-internals/</a></p>
<p>implement tinyurl（以及distribute across multiple servers)<br><a href="http://stackoverflow.com/questions/742013/how-to-code-a-url-sho" target="_blank" rel="external">http://stackoverflow.com/questions/742013/how-to-code-a-url-sho</a></p>
<p>determine trending topics(twitter)<br><a href="http://www.americanscientist.org/issues/pub/the-britney-spears-" target="_blank" rel="external">http://www.americanscientist.org/issues/pub/the-britney-spears-</a><br><a href="http://www.michael-noll.com/blog/2013/01/18/implementing-real-t" target="_blank" rel="external">http://www.michael-noll.com/blog/2013/01/18/implementing-real-t</a></p>
<p>copy one file to multiple servers<br><a href="http://vimeo.com/11280885" target="_blank" rel="external">http://vimeo.com/11280885</a></p>
<p>稍微知道一下dynamo key value store，以及google的gfs和big table</p>
<p>其他家的<br><a href="http://www.quora.com/What-are-the-top-startup-engineering-blogs" target="_blank" rel="external">http://www.quora.com/What-are-the-top-startup-engineering-blogs</a></p>
<p>==================================================================<br>在说说怎么准备这样的面试<br>首先如果你连availability/scalability/consistency/partition之类的都不是太有概<br>念的话，我建议先去wikipedia或者找一个某个大学讲这门课的网站稍微看一下，别一<br>点都不知道<br>这个链接也不错<br><a href="http://www.aosabook.org/en/distsys.html" target="_blank" rel="external">http://www.aosabook.org/en/distsys.html</a></p>
<p>如果你这些基本的东西都不还知道，那么我觉得你就和大部分毫无实际经验的人差不多一<br>个水平…<br>能做的就是一点一点去准备，如果你还有充足的时间的话，建议从你面试的那家公司的<br>engineering blog看起，把人家用的technology stack/product都搞清楚，然后在把能<br>找到的面试题都做一遍呗….我们做coding题说白了不也是题海战术…而且你如果坚<br>持看下去，真的会看出心得，你会发现很多地方都有相同之处，看多了就也能照葫芦画<br>瓢了…</p>
<p>再有就是面试的时候应该怎么去approach这种题，我说说我的做法</p>
<ol>
<li>product spec/usage scenario 和面试者confirm这个东西到底是做什么的<br>可以先列出来几个major functionality，然后有时间的话，再补充一些不重要的<br>把你想的都写下来</li>
</ol>
<ol>
<li>define some major components<br>就是画几个圈圈框框的，每个发表一番您的高见….然后讲他们之间怎么interact</li>
</ol>
<p>以上是question specific的东西，<br>这个讲完了，我们可以讲一些每道题都是用的，比如说<br>怎么scale/怎么partition/怎么实现consistency，这些东西，可以套用到任何题上</p>
<p>当然了，我们遇到的题和解题的方法可能都有些出入，不见得每道题有一个路数下来，<br>最重要的是，讲题的时候要有条理，画图要清楚，保持和面试官的交流，随时问一下人<br>家的意见。</p>
<p>我能想到的就这么多，欢迎大家交流，希望大家都能找到理想的工作.</p>
]]></content>
    <summary type="html">
    <![CDATA[Original from Mitbbs. The orignal post no longer available.]]>
    
    </summary>
    
      <category term="Design" scheme="http://jssu.github.io/tags/Design/"/>
    
      <category term="FB" scheme="http://jssu.github.io/tags/FB/"/>
    
      <category term="学习" scheme="http://jssu.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Timestamp]]></title>
    <link href="http://jssu.github.io/2015/06/07/Timestamp/"/>
    <id>http://jssu.github.io/2015/06/07/Timestamp/</id>
    <published>2015-06-07T05:06:11.000Z</published>
    <updated>2015-06-07T20:52:20.000Z</updated>
    <content type="html"><![CDATA[<p> Example:<br>     timestamp: 1 ‘key’ ‘value1’<br>     timestamp: 2 ‘key’ ‘value2’<br>     timestamp: 3 ‘key’ ‘value3’<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">get<span class="function"><span class="params">(<span class="string">'key'</span>, <span class="number">1</span>)</span> -&gt;</span> value1</span><br><span class="line"><span class="string">'key'</span> @ timestamp <span class="number">1</span><span class="function"> -&gt;</span> value1</span><br><span class="line">get<span class="function"><span class="params">(<span class="string">'key'</span>, <span class="number">2</span>)</span> -&gt;</span> value1</span><br><span class="line"><span class="string">'key'</span> @ timestamp <span class="number">2</span><span class="function"> -&gt;</span> value2</span><br><span class="line"><span class="string">'key'</span> @ timestamp <span class="number">1.5</span><span class="function"> -&gt;</span> value1</span><br><span class="line">get<span class="function"><span class="params">(<span class="string">'key'</span>, <span class="number">3</span>)</span> --&gt;</span> ??? value3</span><br><span class="line">get<span class="function"><span class="params">(<span class="string">'key'</span>, <span class="number">0</span>)</span> --&gt;</span> ??? <span class="number">0</span> <span class="keyword">or</span> <span class="literal">undefined</span></span><br><span class="line">get<span class="function"><span class="params">(<span class="string">'key'</span>, <span class="number">10</span>)</span> --&gt;</span> ??? value3</span><br></pre></td></tr></table></figure></p>
<p>要求设计<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void <span class="operator"><span class="keyword">set</span>(<span class="built_in">int</span> <span class="keyword">timestamp</span>, <span class="keyword">string</span> <span class="keyword">key</span>, <span class="built_in">int</span> val)</span><br><span class="line"><span class="built_in">int</span> <span class="keyword">get</span>(<span class="built_in">int</span> t, <span class="keyword">string</span> <span class="keyword">key</span>)</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;unordered_map&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Node</span><br><span class="line">&#123; <span class="keyword">int</span> timestamp;</span><br><span class="line">  <span class="keyword">int</span> val;</span><br><span class="line">    Node(<span class="keyword">int</span> t, <span class="keyword">int</span> v)&#123;timestamp=t; val=v;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Timestp</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="built_in">vector</span>&lt;Node&gt;&gt; <span class="built_in">map</span>;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> timestamp, <span class="built_in">string</span> key, <span class="keyword">int</span> val)</span></span><br><span class="line">   </span>&#123;</span><br><span class="line">      <span class="built_in">map</span>[key].push_back(Node(timestamp, val));</span><br><span class="line">   &#125; </span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> t, <span class="built_in">string</span> key)</span></span><br><span class="line">   </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(<span class="built_in">map</span>.find(key)==<span class="built_in">map</span>.end()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> m=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> lenv=<span class="built_in">map</span>[key].size();</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;lenv; i++)</span><br><span class="line">       &#123;</span><br><span class="line">          <span class="keyword">if</span>(<span class="built_in">map</span>[key][i].timestamp==t)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">map</span>[key][i].val;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">map</span>[key][i].timestamp&lt;t)</span><br><span class="line">            m=<span class="built_in">map</span>[key][i].val;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> m;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  Timestp sol;</span><br><span class="line">  sol.<span class="built_in">set</span>(<span class="number">1</span>,<span class="string">"fred"</span>, <span class="number">2</span>);</span><br><span class="line">  sol.<span class="built_in">set</span>(<span class="number">2</span>,<span class="string">"hello"</span>, <span class="number">4</span>);</span><br><span class="line">  sol.<span class="built_in">set</span>(<span class="number">4</span>,<span class="string">"hello"</span>, <span class="number">10</span>);</span><br><span class="line">  sol.<span class="built_in">set</span>(<span class="number">3</span>,<span class="string">"nice"</span>, <span class="number">6</span>);</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"sol.get(2,'fred')= "</span>&lt;&lt;sol.get(<span class="number">2</span>,<span class="string">"fred"</span>)&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"sol.get(3.5, 'hello')= "</span>&lt;&lt;sol.get(<span class="number">3.5</span>, <span class="string">"hello"</span>)&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"sol.get(4.5, 'hello')= "</span>&lt;&lt;sol.get(<span class="number">4.5</span>, <span class="string">"hello"</span>)&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p> Example:<br>     timestamp: 1 ‘key’ ‘value1’<br>     timestamp: 2 ‘key’ ‘value2’<br>     timestamp: 3 ‘key’ ‘value3’<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">get<span class="function"><span class="params">(<span class="string">'key'</span>, <span class="number">1</span>)</span> -&gt;</span> value1</span><br><span class="line"><span class="string">'key'</span> @ timestamp <span class="number">1</span><span class="function"> -&gt;</span> value1</span><br><span class="line">get<span class="function"><span class="params">(<span class="string">'key'</span>, <span class="number">2</span>)</span> -&gt;</span> value1</span><br><span class="line"><span class="string">'key'</span> @ timestamp <span class="number">2</span><span class="function"> -&gt;</span> value2</span><br><span class="line"><span class="string">'key'</span> @ timestamp <span class="number">1.5</span><span class="function"> -&gt;</span> value1</span><br><span class="line">get<span class="function"><span class="params">(<span class="string">'key'</span>, <span class="number">3</span>)</span> --&gt;</span> ??? value3</span><br><span class="line">get<span class="function"><span class="params">(<span class="string">'key'</span>, <span class="number">0</span>)</span> --&gt;</span> ??? <span class="number">0</span> <span class="keyword">or</span> <span class="literal">undefined</span></span><br><span class="line">get<span class="function"><span class="params">(<span class="string">'key'</span>, <span class="number">10</span>)</span> --&gt;</span> ??? value3</span><br></pre></td></tr></table></figure></p>
<p>要求设计<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void <span class="operator"><span class="keyword">set</span>(<span class="built_in">int</span> <span class="keyword">timestamp</span>, <span class="keyword">string</span> <span class="keyword">key</span>, <span class="built_in">int</span> val)</span><br><span class="line"><span class="built_in">int</span> <span class="keyword">get</span>(<span class="built_in">int</span> t, <span class="keyword">string</span> <span class="keyword">key</span>)</span></span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="Uber" scheme="http://jssu.github.io/tags/Uber/"/>
    
      <category term="学习" scheme="http://jssu.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[论底层青年如何逆袭到中上阶层]]></title>
    <link href="http://jssu.github.io/2015/06/06/%E4%BB%8A%E5%A4%A9/"/>
    <id>http://jssu.github.io/2015/06/06/今天/</id>
    <published>2015-06-06T22:40:53.000Z</published>
    <updated>2015-06-07T20:52:18.000Z</updated>
    <content type="html"><![CDATA[<p>转：微信号-&gt;灼见</p>
<p>李白曾说自己是李暠九世孙，郭沫若对此考证一番之后，认为李白在吹牛。先不说此事真伪，单说李暠，他是李广十六世孙，东晋年间在敦煌酒泉一带称王，他的两个儿子先后继位后一个战死，一个战败自杀。后来，李暠七世孙李渊建立唐朝。很多改变历史的大人物的出现不是因为祖坟冒青烟，他们做成的那些大事可能是一个家族几代人、十几代人乃至几十代人奋斗不息的结果。</p>
<p>有些事，即使你选对策略，竭尽全力，直到死你也做不成，你儿子也做不成，直到你孙子长大成人了才有可能做成。也有可能还是做不成，需要你孙子的儿子、孙子们继续为之奋斗不息……<br><img src="http://ww1.sinaimg.cn/mw690/81b78497jw1emfgts2pt4j21hc0u0k1c.jpg" alt="测试"><br><a id="more"></a></p>
<p>一件可能至少要三代人才能做成的事，你家上两代人几乎没有给你打下任何基础，你想靠自己的努力奋斗在短时间内完成，结果很可能是把你自己活活逼疯。</p>
<p>很多年轻人今天想做这个，明天想做那个，少年头转眼就白了，人生就这么蹉跎了。只是这蹉跎也是因人而异的。例如有些人出身于上层社会，他们出生后直接就在所谓的马斯洛需求第四层嬉戏玩耍，他们纵使蹉跎，只要不犯大错，最后直到死也还是会停留在上层社会。而社会最底层的年轻人，可能一直很努力，但却始终只能在社会最底层垂死挣扎。</p>
<p>盲目的努力，其实也是一种蹉跎。只是这盲目可能并不是盲目者的错。如果按过去的说法，他们盲目是因为盲目就是他们的命。如果按现在的说法，他们盲目是因为信息不对称，信息不对称是万恶之源。</p>
<p>如果将上述两种说法综合一下，可以得出这样一个结论：一个人所谓的命，很大程度上是他接收到的信息以及他是否拥有善于甄别、利用重要信息的能力所决定的。</p>
<p>什么是命？看过一个纪录片，介绍一种海鸟，雌鸟下了俩蛋，孵出两只小鸟。其中个儿大一些的小鸟猛啄个儿小一些的小鸟，并将后者推出妈妈的怀抱。其实后者也没被推出多远，只是被推出二三十厘米远，还在它妈妈眼皮底下。但它妈妈对它完全视而不见，任由它活活饿死在自己面前。而那只个儿大的小鸟则得到了很好的喂养。动物的命就是这样，人类的命亦大抵如此。人类不过是所谓的高级动物而已，而这个“高级动物”的称号还是自封的。</p>
<p>什么是命？那些基因特别优秀的男人，女人会倒贴钱想方设法跟他结婚生孩子。说到这儿我想起一个女孩儿，长相非常一般，身高一米五左右，她最大的优势是她父亲是副县长。十几年前，这个女孩儿“娶”了这样一个老公，身高一米八五左右，长相和周润发有一拼，有时我甚至觉得他比周润发还要更帅一些，但就是家里穷得一塌糊涂。最近我还见过他，他依旧那么帅，现在也混成一个不大不小的领导了。</p>
<p>什么是命？我曾跟别人开玩笑说外表如村上春树、郭敬明或安妮宝贝那样的人会去写小说，你觉得外表如金城武那样的人会去写小说吗？外表如金城武那样的人，没时间写小说，因为他们的生活本身就是小说。</p>
<p>什么是命？杜甫说文章憎命达。其实在杜甫生活的那个年代，一个人能写文章，这已经不是一般“命达”了，这可能是其祖上几代人努力奋斗的结果。在那个年代，大多数人都是文盲。李白如果出身于唐朝平民家庭，他可能连认字的机会都没有。李白一生到处漫游，你知道那要花多少钱吗？很大程度上，物质基础决定了精神境界。而所谓的精神境界，某种意义上，其实亦是一种善于甄别、利用重要信息的能力。</p>
<p>什么是命？陈胜曾问天：“王侯将相宁有种乎？”陈胜可能不知道，他要干的事，需要他的上几代人为之蓄势。盖世功名恰如绝世美人，均在云端之上，从来都是有势者得之。无势可依者欲得之必须谋势，而谋势之术可能同样需要至少两三代人学习摸索并且传承给子孙。当然，肯定也有人用几年或十几年的时间通过自学慢慢学会了谋势之术，只是这需要大量阅读史书或其他领域的经典，同时也需要他们在青少年时代得到过相对较好的教育。也就是说，他们要有条件做很长一段时间的有闲阶层（这个条件通常需要其家庭或家族直接给予或间接给予，这个条件就是所谓的“种”，或者也可以被称之为“命”），进而充分学习，充分尝试，然后再去谋求充分发展的机会，即谋势。而所谓的谋势，究其本质，同样需要借助善于甄别、利用重要信息的能力。</p>
<p>什么是命？高富帅用多年时间追求一个美女是情深似海的痴情；穷矮丑用多年时间追求一个美女是臭不要脸的纠缠。高富帅挑逗美女，会被视为调情；穷矮丑挑逗美女，则会被视为骚扰或猥亵。</p>
<p>什么是命？众所周知，屌丝有男亦有女，都说男屌丝几乎不可能和白富美在一起，女屌丝和高富帅在一起的可能性会大很多吗？很多女屌丝最大的错觉就是以为自己只要鄙视男屌丝就可以证明自己不是屌丝了。但现实却是，女屌丝十有八九最终还是只能和男屌丝相亲然后结婚。这就是残酷的真相，这就是命。很多女屌丝说高富帅结婚后对老婆更好，既浪漫又专一，然后把自己身边的男屌丝贬得一文不值，说他们low到极点。唉，屌丝何苦鄙视屌丝？这种鄙视，究其本质，是在潜意识里自己鄙视自己。</p>
<p>什么是命？为什么很多女人或男人总是抱怨自己的前任都是极品烂人？是因为天真纯朴所以遇人不淑？可能主要还是因为物以类聚吧。只是很少有人愿意承认这一点。纵使他们在日后某一天终于自以为是地醒悟了，就能遇见自己心目中所谓的理想伴侣了？除非他们能在自己身上找原因并有所改变……</p>
<p>年少轻狂时，不知所谓的“命”为何物。最初满脑袋都是情啊爱啊，其实就是被流行文化彻底洗脑了。后来从爱情梦中惊醒了，想要彻底改变自己的命，读了几本心灵鸡血书，就妄想扼住命运的喉咙，完全没意识到自己就是一个“心比天高，命比纸薄”的人，被命运压在身下各种蹂躏。</p>
<p>某种程度上洞悉自己的命以及某些死都无法突破的局限后，比原来轻松快乐了很多，大概是因为不再满脑袋只想未来了，可以从当下眼前发现一些让身心沉醉的奇妙情境或诗意瞬间。只是还是不甘心，还是想革自己的命。</p>
<p>“革命”这个词，最早见于《周易》。读《周易》时，发现很多名人的名字都取于本书，而且冥冥中似乎真的影响或改变了他们的命运或气质。例如蒋介石，他这名应源于“介于石”。再例如莫文蔚，她这名应源于“君子豹变，其文蔚也”，“文蔚”大意是像豹纹一样美丽神秘，这和莫文蔚的气质还真挺契合的。</p>
<p>读完《周易》后，又粗读了一遍命学经典《滴天髓》，对于天干地支、五行五气什么的肯定不可能一下就研究明白了，但对清气、浊气、真神、假神什么的似乎还能粗浅理解一点点。读《滴天髓》和读《周易》感觉差不多，用这类书算命我不知道是否靠谱儿，我也无意用这类书里的理论给自己算命，我研究这类书，更像是研究一种行为心理学。我只是想了解一下除了那些例如出身这种个人无法选择的因素之外，我能通过哪些行为在某种程度上改变自己的命运。</p>
<p>还有很多奇书，类似于《周易》和《滴天髓》。读这类书时，会很想革自己的命，运用一些看似很神秘其实特质朴的道德方法论，运用一些所谓的霹雳手段。</p>
<p>一个人想要革自己的命，首先要在最大程度上认清自己的命。这就好像一个屌丝青年想要逆袭成功，首先要坦然面对自己就是一个屌丝这一事实。坦然承认自己就是一个屌丝，只是一定不要因此而同情自己，不要自怜自伤，自怨自艾。</p>
<p>所谓认清自己的命，主要就是搞清楚你最想干什么，你能干什么。全力去干那件你最想干且能干的事，你可以将其视为你的理想。当你为了干这件事而奋斗不息，你的命自然而然会发生改变。</p>
<p>除此之外，想要认清自己的命，还需要不断读书，大量读书，大量阅读经典书籍，尤其是大量阅读经典史书。大量阅读经典史书可以让你更深刻地认清自己的命，让你知道做什么事以及如何做才能革自己的命。</p>
<p>想要革自己的命，一定要有超越物质的自由心态。只是这种自由心态，通常需要在很坚实的物质基础上慢慢习得。还是那句话，很大程度上，物质基础会决定精神境界。当你的物质基础有了较大改变之后，你的心胸、眼界、社交圈以及你的一些重要能力自然随之而改变。也就是说，你会获得更多有价值的信息，而你甄别、利用重要信息的能力也会不断增强。</p>
<p>在中国古代，很多看似轻视物质的“圣人”，其实都过着妖童美妾酒肉臭的生活。还有古代的僧人，他们也会轻视物质。但事实却是，古代很多佛寺占有大量土地，其佃农妻女的初夜权甚至亦归僧人所有。那些在物质层面和精神层面上都很贫乏的人，假模假式地在轻视物质的同时空谈精神，可体验如压迫者般附庸风雅的乐趣，只是其两腿间的生殖器却是事实意义上的“被压迫者的生殖器”。</p>
<p>美国南北战争爆发后，马克思因异常焦虑而彻夜失眠，他担忧的不是美国人民的命运，而是担忧因为这场战争的爆发，会让美国人在很长一段时间内只关心美国国内形势，不再关注欧洲新闻。这可能会导致马克思收入锐减，因为他当时是受雇于美国《纽约论坛报》的自由撰稿人，负责为之提供欧洲新闻……</p>
<p>很多时候，想要缓解焦虑进而让内心宁静，物质财富比精神财富更管用。北京国家图书馆里精神财富够多了吧，如果一个年轻人在北京过着极端穷困的生活，估计国图里浩如烟海的精神财富也很难让他获得内心的宁静。</p>
<p>物质财富不仅能让一个人获得内心的宁静，也能让一个人的身心获得更大的自由。什么是自由？自由不是你想干什么就干什么，自由是你想不干什么就不干什么。这也是有钱最大的好处。有钱不能让你为所欲为，但却能让你想不干什么就不干什么。简而言之，有钱能让你自由……</p>
<p>怎样才能不再因为钱而烦恼？有这样两个方法：第一个方法是实现财务自由，第二个方法是自杀。</p>
<p>估计你对自杀应该没什么兴趣，所以我们还是谈谈财务自由吧。某种程度上，财务自由是所有自由的基础。如果说自由是能力要比欲望大很多，那么财务自由就是赚钱能力要比消费欲望大很多。所以想要实现财务自由，可以朝这样两个方向努力：一是不断提高自己的赚钱能力，二是不断减少自己的消费欲望。也就是说，财务自由不一定需要赚很多钱，如果你能深刻了解消费社会的各种骗局，如果你能摆脱消费社会强加给你的那些虚假欲望，只关注你内心最真实的欲望，那么你并不需要太多的钱，你就能实现财务自由了。</p>
<p>或者我们也可以这样说，想要实现财务自由，最重要的不是赚钱，而是修炼心性，最重要的就是不断给你的欲望做减法。否则即使你资产过亿，你依然会感到心烦意乱。欲壑难填的人永无自由之日。巨额财富不会让你感到自由，真正让你感到自由的是虚假欲望很少的生活。</p>
<p>其实一个世人眼中的所谓穷人也能实现财务自由，只要他是一个人格独立、精神自由的人，只要他能运用自己的独特智慧超越盲目愚蠢的物欲以及那些让人付出高昂代价的世俗偏见。事实上，如果你无法超越这两个无形的敌人，无论你赚多少钱，你都不会感到自由。</p>
<p>想要革自己的命，很有必要做到所谓的“当下不杂”，这可以让你最大程度上避免自身资源的无谓浪费。因为当下不杂，所以内心宁静。内心宁静是最强大的人生之力。</p>
<p>想要内心宁静，一方面正如上文所述的那样，需要一定的物质基础；另一方面则需要一个极简的人生最主要目标，或者你也可以将这个目标称之为理想。</p>
<p>你为什么痛苦焦虑？很重要的一个原因是你什么都想要。都说“理想丰满，现实骨感”，其实想让现实丰满，很有必要让理想骨感，最好骨感到只剩一副骷髅骨架，或者只剩一个骷髅头骨，静静凝视着它，在心里对自己说：怕什么，你会一直活到死的。</p>
<p>人这一生，能干好一件事就已经很了不起了。例如专注于研究唐史，研究宋词，搞摄影，研究哲学，写侦探小说，写影评，写书评，搞营销，搞设计，做川菜等等。什么都想干，什么都干不好。趁年轻，尝试很多事，然后选定一件事，将其干到极致。当然前提是乐在其中，如果感觉很受罪那就算了，感觉很受罪必然会拖延。将一件事干到极致，不是说只干这件事，别的就不干了。只是在人生的某个阶段有一个最主要的目标，把大多数时间、精力集中于此。干其他事就当陶冶性情，或是寻找他山之石，或者只是为了放松神经。将一件事干到极致之后，必然会有所成就，有所成就后可能会有如贼入空室般的空虚。只是那空虚，是令人愉悦的空虚……</p>
<p>需要提醒你的就是，对于你视之为人生理想的那件事，如果你只是去做，你可能永远都做不好，但如果你用游戏者心态去玩，却有可能玩得很好。一旦你玩到极致，还有可能会名利双收，虽然这名利可能是你原来根本不想要的。</p>
<p>对于一个真正的理想青年来说，用游戏者心态去实现理想是人世间最快乐的事。</p>
<p>还有就是价值观的问题。如果你一个人独自生活，想超越世俗价值观，其难度相对而言要小一些。但如果你结婚生子了，想超越世俗价值观就很难了。只是如果你想革你自己的命，革你家人的命，为了让他们能过上更好的生活，你想获得世俗意义上的成功，那么选择运用超越世俗价值观的方法，要比选择运用遵循世俗价值观的方法更有效。这就是所谓的以出世之心做入世之事。</p>
<p>以出世之心做入世之事，这是屌丝青年通过自我革命完成逆袭的必由之路。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>转：微信号-&gt;灼见</p>
<p>李白曾说自己是李暠九世孙，郭沫若对此考证一番之后，认为李白在吹牛。先不说此事真伪，单说李暠，他是李广十六世孙，东晋年间在敦煌酒泉一带称王，他的两个儿子先后继位后一个战死，一个战败自杀。后来，李暠七世孙李渊建立唐朝。很多改变历史的大人物的出现不是因为祖坟冒青烟，他们做成的那些大事可能是一个家族几代人、十几代人乃至几十代人奋斗不息的结果。</p>
<p>有些事，即使你选对策略，竭尽全力，直到死你也做不成，你儿子也做不成，直到你孙子长大成人了才有可能做成。也有可能还是做不成，需要你孙子的儿子、孙子们继续为之奋斗不息……<br><img src="http://ww1.sinaimg.cn/mw690/81b78497jw1emfgts2pt4j21hc0u0k1c.jpg" alt="测试"><br>]]>
    
    </summary>
    
      <category term="文章" scheme="http://jssu.github.io/tags/%E6%96%87%E7%AB%A0/"/>
    
      <category term="生活" scheme="http://jssu.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Code Tree]]></title>
    <link href="http://jssu.github.io/2015/06/04/TreeCode/"/>
    <id>http://jssu.github.io/2015/06/04/TreeCode/</id>
    <published>2015-06-04T22:53:27.000Z</published>
    <updated>2015-06-07T18:07:03.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Contains_Duplicate_III">Contains Duplicate III</h3><p>Given an array of integers, find out whether there are two distinct indices i and j in the array such that the difference between nums[i] and nums[j] is at most t and the difference between i and j is at most k.<br>        <a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> Node&#123;</span><br><span class="line">        <span class="keyword">long</span> val;  <span class="comment">//t</span></span><br><span class="line">        <span class="keyword">int</span> pos;  <span class="comment">//k</span></span><br><span class="line">        Node * left;</span><br><span class="line">        Node * right;</span><br><span class="line">        Node(<span class="keyword">long</span> v, <span class="keyword">int</span> p)&#123;val=v; pos=p; left=NULL; right=NULL;&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(Node * &amp;root, <span class="keyword">int</span> ks, <span class="keyword">long</span> tz, <span class="keyword">int</span> k, <span class="keyword">int</span> t)</span></span><br><span class="line">    </span>&#123; <span class="keyword">if</span>(!root)</span><br><span class="line">        &#123;root=<span class="keyword">new</span> Node(tz, ks); <span class="keyword">return</span> <span class="keyword">false</span>;&#125;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">abs</span>(<span class="keyword">long</span>(tz-root-&gt;val))&gt;INT_MAX)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">if</span>(ks-root-&gt;pos&lt;=k &amp;&amp; <span class="built_in">abs</span>(tz-root-&gt;val)&lt;=t)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">if</span>(tz&lt; root-&gt;val)</span><br><span class="line">        <span class="keyword">return</span> insert(root-&gt;left, ks, tz, k, t);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> insert(root-&gt;right, ks, tz, k, t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">containsNearbyAlmostDuplicate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k, <span class="keyword">int</span> t)</span> </span>&#123; </span><br><span class="line">       <span class="keyword">if</span>(nums.empty()) <span class="keyword">return</span> <span class="keyword">false</span>;             <span class="comment">// j-i&lt;=k; [j]-[i]&lt;=t </span></span><br><span class="line">       Node *root=<span class="keyword">new</span> Node((<span class="keyword">long</span>)nums[<span class="number">0</span>],<span class="number">0</span>);      <span class="comment">//k is position, t is nums[];</span></span><br><span class="line">       <span class="keyword">int</span> lenn= nums.size();</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;lenn; i++)</span><br><span class="line">       &#123; <span class="keyword">if</span>(insert(root, i, nums[i], k, t)) </span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">true</span>;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Contains_Duplicate_III">Contains Duplicate III</h3><p>Given an array of integers, find out whether there are two distinct indices i and j in the array such that the difference between nums[i] and nums[j] is at most t and the difference between i and j is at most k.<br>]]>
    
    </summary>
    
      <category term="LeetCode" scheme="http://jssu.github.io/tags/LeetCode/"/>
    
      <category term="学习" scheme="http://jssu.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TestPage]]></title>
    <link href="http://jssu.github.io/2015/06/03/TestPage/"/>
    <id>http://jssu.github.io/2015/06/03/TestPage/</id>
    <published>2015-06-04T00:55:15.000Z</published>
    <updated>2015-06-04T02:18:38.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> h; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://jssu.github.io/2015/06/03/hello-world/"/>
    <id>http://jssu.github.io/2015/06/03/hello-world/</id>
    <published>2015-06-03T10:55:30.000Z</published>
    <updated>2015-06-07T16:19:44.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<br>]]>
    
    </summary>
    
  </entry>
  
</feed>